#include <iostream>
#include <fstream>
#include <vector>
#include <typeinfo>

#define UNUSED(X) ((void)X)

using std::cout;
using std::endl;

std::string config = "configs/test.conf";

class Node
{
public:
    Node();
    Node(std::string, std::string);
    bool is_empty();
    template <typename T> T as();
// private:
    std::string *name;
    std::string *value;
    std::vector<Node> subnodes;
    std::vector<Node> nextnodes;
};

Node::Node()
{
    this->name = NULL;
    this->value = NULL;
}

Node::Node(std::string name, std::string value)
{
    this->name = new std::string(name);
    this->value = new std::string(value);
}

bool Node::is_empty()
{
    if(!subnodes.size() && !nextnodes.size() &&
        this->name == NULL && this->value == NULL)
    {
        return true;
    }
    return false;
}

template <typename T>
T Node::as()
{
    cout << "unsupported type: " << typeid(T).name() << " <Exiting>" << endl;
    exit(1);
}

template <>
int Node::as<int>()
{
    cout << "a value of int was requested." << endl;
    return 0x64;
}

enum
{

} tokens;

typedef struct
{
    tokens token;
    std::string name;
    struct token_t *next;
    struct token_t *previous;
} token_t;

class Tokenizer
{
    Tokenizer(std::);
};


class Parser
{
public:
    Parser(std::string);
    bool is_indented(std::string);
    int has_label(std::string);
    std::string get_label(std::string, int);
    void process();
private:
    std::vector<Node> top_nodes;
    std::string configfile;
};

Parser::Parser(std::string config)
{
    this->configfile = config;
    // test some nodes.
    std::string aname = "Hello";
    std::string avalue = "World";
    Node a = Node(aname, avalue);
    a.as<int>();
    // std::string atest = a.as<std::string>();
    this->process();
}

// checks if line starts with space or tab
bool Parser::is_indented(std::string line)
{
    if(line[0] == ' ' || line[0] == '\t')
    {
        return true;
    }
    return false;
}

int Parser::has_label(std::string line)
{
    unsigned int i = 0;
    while(line[i] == ' ') i++;
    for(; i < line.length(); i++)
    {
        if(line[i] == ':')
        {
            return i;
        }
        if(!std::isalnum(line[i]))
        {
            return -1;
        }
    }
    return -1;
}

std::string Parser::get_label(std::string line, int offset)
{
    std::string label;
    line += offset;
    int labelstart = this->has_label(line);
    if(labelstart < 0)
    {
        return "";
    }
    cout << "label at: " << labelstart << " ";
    for(unsigned int i = 0; i < line.size(); i++)
    {
        if(line[i] == ':')
        {
            break;
        }
        else
        {
            label += line[i];
        }
    }
    return label;
}

void Parser::process()
{
    // std::ifstream fin;
    // fin.open(this->configfile, std::ios::in);

    // std::string line;
    // Node root;
    // while(std::getline(fin, line))
    // {
    //     // if indented its a subnode.
    //     // else its a top_node.
    //     if(this->is_indented(line))
    //     {
    //         cout << "indented line: ";
    //         if(this->has_label(line))
    //         {
    //             cout << "with label: ";
    //         }
    //     }
    //     else
    //     {
    //         cout << "unindented line: ";
    //         if(this->has_label(line))
    //         {
    //             std::string label = this->get_label(line, 0);
    //             cout << "label: " << label << " ";
    //         }
    //     }
    //     cout << line << endl;
    // }
}

// int main(void)
// {
//     Parser confparse = Parser(config);
//     return 0;
// }
